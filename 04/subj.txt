C++ - Модуль 04
Полиморфизм подтипов, абстрактные классы, интерфейсы

Для каждого упражнения вы должны предоставить наиболее полные тесты, которые вы можете.
Конструкторы и деструкторы каждого класса должны выводить определенные сообщения. Не используйте
одно и то же сообщение для всех классов.
Начните с реализации простого базового класса Animal. У него есть один защищенный
атрибут:
- std::string type;
Реализуйте класс Dog, который наследуется от Animal.
Реализуйте класс Cat, который наследуется от Animal.
Эти два производных класса должны установить свое поле type в зависимости от имени. Тогда,
тип класса Dog будет инициализирован в "Dog", а тип класса Cat будет инициализирован в "Cat".
Тип класса Animal может быть оставлен пустым или установлен в значение по вашему выбору.
Каждое животное должно уметь использовать функцию-член:
makeSound()
Она будет печатать соответствующий звук (кошки не лают).
Выполнение этого кода должно вывести специфические звуки классов Собака и Кошка, а не
животных.

int main()
{
	const Animal* meta = new Animal();
	const Animal* j = new Dog();
	const Animal* i = new Cat();
	std::cout << j->getType() << " " << std::endl;
	std::cout << i->getType() << " " << std::endl;
	i->makeSound(); //will output the cat sound!
	j->makeSound();
	meta->makeSound();
	...
	return 0;
}

Чтобы убедиться, что вы поняли, как это работает, реализуйте класс WrongCat, который наследуется
от класса WrongAnimal. Если вы замените животные и кошки на неправильные
в приведенном выше коде, WrongCat должен выдать звук WrongAnimal.
Реализуйте и сдайте больше тестов, чем приведенные выше.