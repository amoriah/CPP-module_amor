C++ - Модуль 04
Полиморфизм подтипов, абстрактные классы, интерфейсы

Упражнение 00: Полиморфизм

Для каждого упражнения вы должны предоставить наиболее полные тесты, которые вы можете.
Конструкторы и деструкторы каждого класса должны выводить определенные сообщения. Не используйте
одно и то же сообщение для всех классов.
Начните с реализации простого базового класса Animal. У него есть один защищенный
атрибут:
- std::string type;
Реализуйте класс Dog, который наследуется от Animal.
Реализуйте класс Cat, который наследуется от Animal.
Эти два производных класса должны установить свое поле type в зависимости от имени. Тогда,
тип класса Dog будет инициализирован в "Dog", а тип класса Cat будет инициализирован в "Cat".
Тип класса Animal может быть оставлен пустым или установлен в значение по вашему выбору.
Каждое животное должно уметь использовать функцию-член:
makeSound()
Она будет печатать соответствующий звук (кошки не лают).
Выполнение этого кода должно вывести специфические звуки классов Собака и Кошка, а не
животных.

int main()
{
	const Animal* meta = new Animal();
	const Animal* j = new Dog();
	const Animal* i = new Cat();
	std::cout << j->getType() << " " << std::endl;
	std::cout << i->getType() << " " << std::endl;
	i->makeSound(); //will output the cat sound!
	j->makeSound();
	meta->makeSound();
	...
	return 0;
}

Чтобы убедиться, что вы поняли, как это работает, реализуйте класс WrongCat, который наследуется
от класса WrongAnimal. Если вы замените животные и кошки на неправильные
в приведенном выше коде, WrongCat должен выдать звук WrongAnimal.
Реализуйте и сдайте больше тестов, чем приведенные выше.

Упражнение 01: Я не хочу поджечь мир в огне

Конструкторы и деструкторы каждого класса должны отображать определенные сообщения.
Реализуйте класс Brain. Он содержит массив из 100 std::string под названием ideas.
Таким образом, у Пса и Кота будет частный атрибут Brain*.
При создании, Пес и Кот создадут свой Brain, используя new Brain();
При уничтожении Собака и Кошка удалят свой Мозг.


В вашей главной функции создайте и заполните массив объектов Animal. Половина его будет
будут объекты Dog, а другая половина - объекты Cat. В конце выполнения программы
выполните цикл по этому массиву и удалите каждое животное. Вы должны удалить непосредственно собак
и кошек как Животных. Соответствующие деструкторы должны быть вызваны в ожидаемом порядке.
Не забудьте проверить утечку памяти.
Копия Собаки или Кошки не должна быть мелкой. Таким образом, вы должны проверить, что ваши копии
являются глубокими копиями!

int main()
{
	const Animal* j = new Dog();
	const Animal* i = new Cat();
	delete j;//should not create a leak
	delete i;
	...
	return 0;
}

Выполнить и сдать больше тестов, чем приведено выше


Упражнение 02: Абстрактный класс

Создавать объекты Animal все-таки не имеет смысла. Это правда, они не издают никаких звуков!
Чтобы избежать возможных ошибок, класс Animal по умолчанию не должен быть инстанцируемым.
Исправьте класс Animal так, чтобы никто не мог его инстанцировать. Все должно работать как прежде.
Если хотите, вы можете обновить имя класса, добавив к Animal префикс A.