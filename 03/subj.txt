Chapter III Exercise 00: Aaaaand... OPEN!

Во-первых, вы должны реализовать класс! Как оригинально!
Он будет называться ClapTrap и будет иметь следующие 
приватные атрибуты, инициализированные
значениями, указанными в скобках:
- Имя, которое передается в качестве параметра в конструктор
- Очки попадания (10), отражают здоровье ClapTrap
- Очки энергии (10)
- Урон от атаки (0)
Добавьте следующие публичные функции-члены, чтобы ClapTrap выглядела более реалистично:
- void attack(const std::string& target);
- void takeDamage(unsigned int amount);
- void beRepaired(unsigned int amount);
Когда ClapTrack атакует, он заставляет свою цель терять 
<attack damage> хит-пойнтов.
Когда Хлопушка ремонтирует себя, она получает <сумма> 
хит-поинтов обратно. Атака и ремонт
стоят по 1 очку энергии. Конечно, ClapTrap не может 
ничего сделать, если у него не осталось ни хит-поинтов
или очков энергии.

Во всех этих функциях-членах необходимо вывести сообщение, 
описывающее происходящее. Например, функция attack() может вывести что-то вроде (конечно, без
угловых скобок):
ClapTrap <имя> атакует <цель>, нанося <дамаг> пунктов урона!
Конструкторы и деструкторы также должны отображать сообщение, чтобы ваши коллеги-оценщики
могут легко увидеть, что они были вызваны.
Выполните и сдайте собственные тесты, чтобы убедиться, что ваш код работает так, как ожидается.

Exercise 01: Serena, my love!

Поскольку ловушек ClapTrap никогда не бывает достаточно, сейчас вы создадите производного робота.
Он будет называться ScavTrap и унаследует конструкторы и деструктор от ClapTrap. Однако его конструкторы, деструктор и атака() будут печатать другие сообщения.
В конце концов, ловушки ClapTrap осознают свою индивидуальность.
Обратите внимание, что правильное построение/уничтожение цепочки должно быть показано в ваших тестах.
Когда создается ScavTrap, программа начинает с построения ClapTrap. Разрушение происходит
в обратном порядке. Почему?
ScavTrap будет использовать атрибуты ClapTrap (в последствии обновлять ClapTrap) и
должен их инициализировать:
- Имя, которое передается в качестве параметра конструктору
- Очки попадания (100), представляющие здоровье Ловушки
- Очки энергии (50)
- Урон от атаки (20)
ScavTrap также будет иметь свою собственную специальную способность:
void guardGate();
Эта функция выведет сообщение о том, что ScavTrap сейчас находится в режиме охраны ворот
охраняет ворота.
Не забудьте добавить больше тестов в вашу программу.

Exercise 02: Repetitive work

Создание ловушек ClapTrap, вероятно, начинает действовать вам на нервы.
Теперь реализуйте класс FragTrap, который наследуется от ClapTrap. Он очень похож на
ScavTrap. Однако его сообщения о создании и уничтожении должны быть разными. Правильный
цепочки построения/уничтожения должны быть показаны в ваших тестах. Когда ловушка FragTrap
создается, программа начинает с построения ловушки ClapTrap. Разрушение происходит в обратном порядке.
То же самое для атрибутов, но на этот раз с другими значениями:
- Имя, которое передается в качестве параметра конструктору
- Очки попадания (100), представляют здоровье ловушки
- Очки энергии (100)
- Урон от атаки (30)
FragTrap также имеет специальную емкость:
void highFivesGuys(void);
Эта функция-член выводит на стандартный вывод положительный запрос "Дай пять".
Опять же, добавьте больше тестов в вашу программу.
8