Новые правила
Отныне все ваши классы должны быть оформлены в ортодоксальной канонической форме, 
если явно не указано иное. Тогда они будут реализовывать четыре необходимые 
функции-члена, приведенные ниже:
- Конструктор по умолчанию
- Конструктор копирования
- Оператор присвоения копий
- Деструктор
Разделите код вашего класса на два файла. Заголовочный файл (.hpp/.h) 
содержит определение класса, а исходный файл (.cpp) - реализацию.

Глава IV
Упражнение 00: Мой первый класс в ортодоксальной канонической форме

Вы думаете, что знаете целые числа и числа с плавающей точкой. Как мило.
Пожалуйста, прочитайте эту статью на 3 страницах (1, 2, 3), чтобы узнать, что это не так. 
Продолжайте, читайте.
До сегодняшнего дня каждое число, которое вы использовали в своем коде, было либо целым 
числом, либо числом с плавающей точкой, либо любым из их вариантов (short, char, long, double и так далее).
Прочитав статью выше, можно с уверенностью предположить, что целые числа и числа с плавающей 
точкой имеют противоположные характеристики.
Но сегодня все изменится. Вы откроете для себя новый удивительный тип чисел: числа с 
фиксированной точкой! Навсегда исчезнув из скалярных типов большинства языков, числа с 
фиксированной точкой предлагают ценный баланс между производительностью, точностью, 
диапазоном и точностью. Это объясняет, почему числа с фиксированной точкой особенно применимы в компьютерной
графике, обработке звука или научном программировании, и это только некоторые из них.
Поскольку в C++ нет чисел с фиксированной точкой, вам предстоит их добавить. Эта статья 
из Беркли - хорошее начало. Если вы понятия не имеете, что такое университет Беркли, прочитайте 
этот раздел его страницы в Википедии.
Создайте класс в ортодоксальной канонической форме, представляющий число с фиксированной точкой:
- Частные члены:
◦ Целое число для хранения значения числа с фиксированной точкой.
◦ Статическая константа целое число для хранения количества дробных битов. Его значением
всегда будет целочисленный литерал 8.
- Открытые члены:
◦ Конструктор по умолчанию, который инициализирует значение числа с фиксированной точкой равным 0.
◦ Конструктор копирования.
◦ Перегрузка оператора присваивания копии.
◦ Деструктор.
◦ Функция-член int getRawBits( void ) const; которая возвращает необработанное значение числа с фиксированной точкой.
◦ Функция-член void setRawBits( int const raw );
которая устанавливает необработанное значение числа с фиксированной точкой.

Running this code:

#include <iostream>
int main( void ) {
	Fixed a;
	Fixed b( a );
	Fixed c;
	c = b;
	std::cout << a.getRawBits() << std::endl;
	std::cout << b.getRawBits() << std::endl;
	std::cout << c.getRawBits() << std::endl;
	return 0;
}
Should output something similar to:

$> ./a.out
Default constructor called
Copy constructor called
Copy assignment operator called // <-- This line may be missing depending on your implementation
getRawBits member function called
Default constructor called
Copy assignment operator called
getRawBits member function called
getRawBits member function called
0
getRawBits member function called
0
getRawBits member function called
0
Destructor called
Destructor called
Destructor called
$>

Глава V
Упражнение 01: На пути к более полезному классу чисел с фиксированной точкой

Предыдущее упражнение было хорошим началом, но наш класс довольно бесполезен. Он может представлять только значение 0.0.
Добавьте в класс следующие публичные конструкторы и публичные функции-члены:
- Конструктор, который принимает в качестве параметра постоянное целое число.
Он преобразует его в соответствующее значение с фиксированной точкой. Значение дробных битов инициализируется 8, как в упражнении 00.
- Конструктор, принимающий в качестве параметра постоянное число с плавающей точкой.
Он преобразует его в соответствующее значение с фиксированной точкой. Значение дробных бит инициализируется на 8, как в упражнении 00.
- Функция-член float toFloat( void ) const;
которая преобразует значение с фиксированной точкой в значение с плавающей точкой.
- Функция-член int toInt( void ) const;
которая преобразует значение с фиксированной точкой в целочисленное значение.
И добавьте следующую функцию в файлы класса Fixed:
- Перегрузка оператора insertion (""), который вставляет представление числа с плавающей точкой в объект выходного потока, переданный в качестве параметра.

Running this code:

#include <iostream>
int main( void ) {
Fixed a;
Fixed const b( 10 );
Fixed const c( 42.42f );
Fixed const d( b );
a = Fixed( 1234.4321f );
std::cout << "a is " << a << std::endl;
std::cout << "b is " << b << std::endl;
std::cout << "c is " << c << std::endl;
std::cout << "d is " << d << std::endl;
std::cout << "a is " << a.toInt() << " as integer" << std::endl;
std::cout << "b is " << b.toInt() << " as integer" << std::endl;
std::cout << "c is " << c.toInt() << " as integer" << std::endl;
std::cout << "d is " << d.toInt() << " as integer" << std::endl;
return 0;
}
Should output something similar to:

$> ./a.out
Default constructor called
Int constructor called
Float constructor called
Copy constructor called
Copy assignment operator called
Float constructor called
Copy assignment operator called
Destructor called
a is 1234.43
b is 10
c is 42.4219
d is 10
a is 1234 as integer
b is 10 as integer
c is 42 as integer
d is 10 as integer
Destructor called
Destructor called
Destructor called
Destructor called
$>

Глава VI
Упражнение 02: Теперь мы разговариваем

Добавьте в свой класс функции-члены public, чтобы перегрузить следующие операторы:
- 6 операторов сравнения: >, <, >=, <=, == и !=.
- 4 арифметических оператора: +, -, * и /.
- 4 оператора инкремента/декремента (пре-инкремент и пост-инкремент, пре-декремент и пост-декремент), которые будут увеличивать или уменьшать значение с фиксированной точкой от наименьшего представляемого, например, 1 + > 1.
Добавьте эти четыре публичные перегруженные функции-члена в ваш класс:
- Статическая функция-член min, которая принимает в качестве параметров две ссылки на числа с фиксированной точкой и возвращает ссылку на наименьшее из них.
- Статическая функция-член min, которая принимает в качестве параметров две ссылки на постоянные числа с фиксированной точкой и возвращает ссылку на наименьшее из них.
- Статическая функция-член max, которая принимает в качестве параметров две ссылки на числа с фиксированной точкой и возвращает ссылку на наибольшее из них.
- Статическая функция-член max, которая принимает в качестве параметров две ссылки на постоянные числа с фиксированной точкой и возвращает ссылку на наибольшее из них.
Вам решать, как тестировать каждую функцию вашего класса. Однако, выполнив приведенный ниже код:

#include <iostream>
int main( void ) {
Fixed a;
Fixed const b( Fixed( 5.05f ) * Fixed( 2 ) );
std::cout << a << std::endl;
std::cout << ++a << std::endl;
std::cout << a << std::endl;
std::cout << a++ << std::endl;
std::cout << a << std::endl;
std::cout << b << std::endl;
std::cout << Fixed::max( a, b ) << std::endl;
return 0;
}
Должно получиться что-то вроде (для большей читабельности сообщения конструктора/деструктора в примере ниже удалены):
$> ./a.out
0
0.00390625
0.00390625
0.00390625
0.0078125
10.1016
10.1016