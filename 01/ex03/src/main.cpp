#include "Weapon.hpp"
#include "HumanA.hpp"
#include "HumanB.hpp"

/* 
Реализуйте класс Weapon, который имеет:
- Частный атрибут type, который является строкой.
- Функция-член getType(), которая возвращает const-ссылку на тип.
- Функция-член setType(), которая устанавливает тип, используя новый, переданный в качестве параметра

Теперь создайте два класса: HumanA и HumanB. Они оба имеют оружие и
имя. У них также есть функция-член attack(), которая отображает (конечно, без
угловых скобок):
<имя> атакует своим <типом оружия>.
HumanA и HumanB почти одинаковы, за исключением этих двух крошечных деталей:
- В то время как HumanA принимает Оружие в своем конструкторе, HumanB не принимает.
- HumanB не всегда может иметь оружие, в то время как HumanA всегда будет вооружен.

Если ваша реализация верна, то выполнение следующего кода напечатает атаку
с "грубой дубиной с шипами", затем вторую атаку с "каким-то другим видом дубины" для обоих
тестовых случаев:
int main()
{
	{
		Weapon club = Weapon("грубая шипованная дубина");
		ЧеловекА bob("Боб", дубина);
		bob.attack();
		club.setType("какой-то другой тип дубины");
		bob.attack();
	}
	{
		Weapon club = Weapon("грубая дубина с шипами");
		HumanB jim("Джим");
		jim.setWeapon(club);
		jim.attack();
		club.setType("какой-то другой тип дубины");
		jim.attack();
	}	
return 0;
}
Не забудьте проверить утечку памяти.
Как вы думаете, в каком случае лучше использовать указатель на
Weapon? И ссылку на Weapon? Почему? Подумайте об этом, прежде чем
приступить к выполнению этого упражнения. */