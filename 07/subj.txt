C++ - Module 07
C++ templates

Упражнение 00: Начните с нескольких функций

Реализуйте следующие шаблоны функций:
- swap: Меняет местами значения двух заданных аргументов.
 Ничего не возвращает.
 - min: Сравнивает два значения, переданные в аргументах,
 и возвращает наименьшее из них.
Если два из них равны, то возвращается второе.
- max: Сравнивает два значения, переданные в аргументах, 
и возвращает наибольшее из них.
Если два значения равны, то возвращается второе.
Эти функции могут быть вызваны с любым типом аргументов. 
Единственное требование заключается в том.
что два аргумента должны иметь одинаковый тип и поддерживать 
все операторы сравнения.

Шаблоны должны быть определены в заголовочных файлах.
Выполните следующий код:

int main( void ) 
{
	int a = 2;
	int b = 3;
	::swap( a, b );
	std::cout << "a = " << a << ", b = " << b << std::endl;
	std::cout << "min( a, b ) = " << ::min( a, b ) << std::endl;
	std::cout << "max( a, b ) = " << ::max( a, b ) << std::endl;
	std::string c = "chaine1";
	std::string d = "chaine2";
	::swap(c, d);
	std::cout << "c = " << c << ", d = " << d << std::endl;
	std::cout << "min( c, d ) = " << ::min( c, d ) << std::endl;
	std::cout << "max( c, d ) = " << ::max( c, d ) << std::endl;
	return 0;
}

Should output:

a = 3, b = 2
min(a, b) = 2
max(a, b) = 3
c = chaine2, d = chaine1
min(c, d) = chaine1
max(c, d) = chaine2

Упражнение 01: Iter

Реализуйте шаблон функции iter, которая принимает 3 параметра 
и ничего не возвращает.
- Первый параметр - адрес массива.
- Второй - длина массива.
- Третий - функция, которая будет вызываться на каждом элементе массива.
Сдайте файл main.cpp, содержащий ваши тесты. Приведите достаточно кода, 
чтобы сгенерировать
исполняемый файл теста.
Ваш шаблон функции iter должен работать с любым типом массива. 
Третий параметр может быть инстанцированный шаблон функции.

Упражнение 02: Массив

Разработайте шаблон класса Array, который содержит элементы типа 
T и реализует следующее поведение и функции:
- Конструирование без параметра: Создает пустой массив.
- Конструкция с параметром unsigned int n: Создает массив из n элементов
инициализированный по умолчанию.
Совет: Попробуйте скомпилировать int * a = new int(); затем выведите *a.
- Конструирование с помощью оператора копирования и оператора присваивания. 
В обоих случаях модификация либо исходного массива или его копии после 
копирования не может повлиять на другой массив.
- Вы ДОЛЖНЫ использовать оператор new[] для выделения памяти. 
Превентивное выделение (выделение памяти заранее) запрещено. 
Ваша программа никогда не должна обращаться к нераспределенной памяти.
- К элементам можно обращаться с помощью оператора subscript: [ ].
- При обращении к элементу с помощью оператора [ ], если его индекс 
выходит за пределы, возникает исключение
будет выброшено исключение std::exception.
- Функция-член size(), которая возвращает количество элементов в массиве. 
Эта функция-член не принимает никаких параметров и не должна изменять 
текущий экземпляр. Как обычно, убедитесь, что все работает, 
как ожидалось, и сдайте файл main.cpp, содержащий ваши тесты.
